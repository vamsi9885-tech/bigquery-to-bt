            "FeedName": "'new_UI_None_type'",
            "FileName": "'TC046_payers_20250818_part_001.csv'",
            "FileExt": "'csv'"

%sql


select c.* from (select b.*, case when b.file_frequency = 'yearly' then to_char(to_timestamp(b.window_start_date, 'YYYYMMDDHH24MISS'),'yyyy') when b.file_frequency = 'monthly' then to_char(to_timestamp(b.window_start_date, 'YYYYMMDDHH24MISS'), 'yyyymm') when b.file_frequency = 'daily' then to_char(to_timestamp(b.window_start_date, 'YYYYMMDDHH24MISS'), 'yyyymmdd') when b.file_frequency = 'weekly' then to_char(to_timestamp(b.window_start_date, 'YYYYMMDDHH24MISS'), 'yyyymmdd') when b.file_frequency = 'biweekly' then to_char(to_timestamp(b.window_start_date, 'YYYYMMDDHH24MISS'), 'yyyymmdd') else to_char(to_timestamp(b.window_start_date, 'YYYYMMDDHH24MISS'), 'yyyymmdd') end as output_folder_name from (select cfc.feed_name,cfc.connector_type,feed_type,cfc.client_name,coalesce(to_char(f.window_start_date, 'YYYYMMDDHH24MISS'), file_date) as window_start_date,coalesce(to_char(f.window_end_date, 'YYYYMMDDHH24MISS'), file_date) as window_end_date,'{$FileExt}' as file_type,regex_date_group_number,coalesce(re_run_count, -1) + 1 as re_run_count,row_delimiter,column_delimiter,coalesce(f.extraction_type, 'sample') as extraction_type,type as type,coalesce(f.is_adhoc_run, true) as is_adhoc_run,adhoc_frequency,cfc.adhoc_start_date,cfc.adhoc_end_date,periodic_frequency,periodic_start_date,f.lag_offset,f.lag_tolerance,f.notify_type,run_status_notification_enabled,feed_completion_notification_enabled,external_email_recipients,internal_email_recipients,start_date.logical_file_name,start_date.file_name_format,start_date.is_mandatory,coalesce(file_date, to_char(CURRENT_TIMESTAMP, 'YYYYMMDDHH24MISS')) as file_date, case when coalesce(f.is_adhoc_run, true) is true then adhoc_frequency else periodic_frequency end as file_frequency ,preserve_archives from (select replace(cast(feed_config->'feed_name' as TEXT), '\"', '') as feed_name, replace(cast(feed_config->'connector_type' as TEXT), '\"', '') as connector_type, replace(cast(feed_config->'feed_type' as TEXT), '\"', '') as feed_type,replace(cast(feed_config -> 'client_name' as TEXT), '\"', '') as client_name,cast(replace(cast(feed_config->'extraction_settings'->'regex_date_group_number' as TEXT), '\"', '') as INTEGER) as regex_date_group_number,replace(cast(feed_config->'extraction_settings'->'row_delimiter' as TEXT), '\"', '') as row_delimiter,replace(cast(feed_config->'extraction_settings'->'column_delimiter' as TEXT), '\"', '') as column_delimiter,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'extraction_type' as TEXT), '\"', '') as extraction_type,replace(cast(feed_config -> 'extraction_settings' -> 'connection_setting' -> 'type' as TEXT), '\"', '') as type,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'is_adhoc_run' as TEXT), '\"', '') as is_adhoc_run,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'split_by' as TEXT), '\"', '') as adhoc_frequency,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'adhoc_start_date' as TEXT), '\"', '') as adhoc_start_date,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'adhoc_end_date' as TEXT), '\"', '') as adhoc_end_date,replace(cast(feed_config->'frequency'->'type' as TEXT), '\"', '') as periodic_frequency,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'periodic_start_date' as TEXT), '\"', '') as periodic_start_date,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'lag_offset' as TEXT), '\"', '') as lag_offset,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'lag_tolerance' as TEXT), '\"', '') as lag_tolerance,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'notify_type' as TEXT), '\"', '') as notify_type,replace(cast(feed_config->'enable_run_status_notification' as TEXT), '\"', '') as run_status_notification_enabled,replace(cast(feed_config->'feed_completion_notification'->'enable' as TEXT), '\"', '') as feed_completion_notification_enabled,replace(cast(feed_config->'email_notification'->'external_ids' as TEXT), '\"', '') as external_email_recipients,replace(cast(feed_config->'email_notification'->'internal_ids' as TEXT), '\"', '') as internal_email_recipients,replace(cast(feed_config->'preserve_archives' as TEXT), '\"', '') as preserve_archives from client_feed_config where feed_name = '{$FeedName}')cfc join (select NULLIF(CASE WHEN SUBSTRING(REGEXP_REPLACE((REGEXP_MATCH(LOWER('{$FileName}'), LOWER(file_name_format)))[cfc1.regex_date_group_number],'[/-]', '', 'g'),1,4)::INT BETWEEN 1900 and 2100 THEN RPAD(SUBSTRING(REGEXP_REPLACE((REGEXP_MATCH(LOWER('{$FileName}'), LOWER(file_name_format)))[cfc1.regex_date_group_number],'[/-]', '', 'g'),1,14),14,'0') ELSE TO_CHAR(to_timestamp(SUBSTRING(REGEXP_REPLACE((REGEXP_MATCH(LOWER('{$FileName}'), LOWER(file_name_format)))[cfc1.regex_date_group_number],'[/-]', '', 'g'),1,14),'MMDDYYYYHH24MISS'),'YYYYMMDDHH24MISS')END,'') AS file_date,case when lower('{$FileName}') ~ '_+part+_' then case when regexp_match(regexp_replace(lower('{$FileName}'),'[_.]+','_', 'g'),'_part_([0-9]+)(?![0-9])') is not null and length((regexp_match(regexp_replace(lower('{$FileName}'),'[_.]+','_', 'g'),'_part_([0-9]+)(?![0-9])'))[1]) < 8 then cast((regexp_match(regexp_replace(lower('{$FileName}'),'[_.]+','_', 'g'),'_part_([0-9]+)(?![0-9])'))[1] as integer) else 0 end else 1 end as part_number,fas.feed_name, logical_file_name, file_name_format, is_mandatory from (select distinct feed_name,logical_file_name,file_name_format,is_mandatory from file_arrival_status where feed_name = '{$FeedName}' and lower('{$FileName}') ~ lower(file_name_format)) fas join (select replace(cast(feed_config->'feed_name' as TEXT), '\"', '') as feed_name, replace(cast(feed_config->'connector_type' as TEXT), '\"', '') as connector_type, replace(cast(feed_config->'feed_type' as TEXT), '\"', '') as feed_type,replace(cast(feed_config -> 'client_name' as TEXT), '\"', '') as client_name,cast(replace(cast(feed_config->'extraction_settings'->'regex_date_group_number' as TEXT), '\"', '') as INTEGER) as regex_date_group_number,replace(cast(feed_config->'extraction_settings'->'row_delimiter' as TEXT), '\"', '') as row_delimiter,replace(cast(feed_config->'extraction_settings'->'column_delimiter' as TEXT), '\"', '') as column_delimiter,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'extraction_type' as TEXT), '\"', '') as extraction_type,replace(cast(feed_config -> 'extraction_settings' -> 'connection_setting' -> 'type' as TEXT), '\"', '') as type,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'is_adhoc_run' as TEXT), '\"', '') as is_adhoc_run,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'split_by' as TEXT), '\"', '') as adhoc_frequency,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'adhoc_start_date' as TEXT), '\"', '') as adhoc_start_date,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'adhoc_end_date' as TEXT), '\"', '') as adhoc_end_date,replace(cast(feed_config->'frequency'->'type' as TEXT), '\"', '') as periodic_frequency,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'periodic_start_date' as TEXT), '\"', '') as periodic_start_date,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'lag_offset' as TEXT), '\"', '') as lag_offset,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'lag_tolerance' as TEXT), '\"', '') as lag_tolerance,replace(cast(feed_config->'extraction_settings'->'implementation_setting'->'notify_type' as TEXT), '\"', '') as notify_type,replace(cast(feed_config->'enable_run_status_notification' as TEXT), '\"', '') as run_status_notification_enabled,replace(cast(feed_config->'feed_completion_notification'->'enable' as TEXT), '\"', '') as feed_completion_notification_enabled,replace(cast(feed_config->'email_notification'->'external_ids' as TEXT), '\"', '') as external_email_recipients,replace(cast(feed_config->'email_notification'->'internal_ids' as TEXT), '\"', '') as internal_email_recipients,replace(cast(feed_config->'preserve_archives' as TEXT), '\"', '') as preserve_archives from client_feed_config where feed_name = '{$FeedName}') cfc1 on fas.feed_name = cfc1.feed_name) start_date on 1=1 left join file_arrival_status f on cfc.feed_name = f.feed_name and start_date.logical_file_name = f.logical_file_name and to_timestamp(coalesce(file_date, to_char(CURRENT_TIMESTAMP, 'YYYYMMDDHH24MISS')), 'YYYYMMDDHH24MISS') between window_start_date and window_end_date left join file_master fm on fm.cadence_id = f.cadence_id and lower('{$FileName}') ~ lower(fm.file_name_format) and start_date.part_number = fm.part) b) c order by c.re_run_count desc limit 1
