name: Upload Test Case Files to ADLS

on:
  workflow_dispatch:  # You can also trigger on push/PR as needed

jobs:
  upload_files:
    runs-on: ubuntu-latest

    env:
      ENV: dev  # Change this to qa/stage/prod as needed

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v3

      - name: üõ†Ô∏è Install Dependencies (jq)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: üîê Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: üíæ Expand Specific Input Files to ~1GB In-Place
  run: |
    CONFIG_FILE="config/test_config.json"
    echo "üìÑ Expanding only selected test cases from $CONFIG_FILE"

    ids_to_expand=$(jq -r '.generate_1gb_for[]' "$CONFIG_FILE")

    for id in $ids_to_expand; do
      tc_dir="regression/test_cases/tc${id}/input_files"

      if [ -d "$tc_dir" ]; then
        echo "üîç Expanding files in: $tc_dir"

        for file in "$tc_dir"/*.csv; do
          if [ -f "$file" ]; then
            echo "üìÑ Expanding file: $file"

            header=$(head -n 1 "$file")
            tail_content=$(tail -n +2 "$file")

            echo "$header" > "$file.tmp"

            for i in $(seq 1 12); do
              echo "   üîÅ Appending chunk $i..."
              echo "$tail_content" >> "$file.tmp"
            done

            mv "$file.tmp" "$file"
            echo "‚úÖ Expanded file size:"
            du -h "$file"
          else
            echo "‚ö†Ô∏è No CSV files found in $tc_dir"
          fi
        done
      else
        echo "‚ö†Ô∏è No input_files folder found for TC$id"
      fi
    done

      - name: üöÄ Upload Test Case Files to ADLS
        env:
          ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.AZURE_STORAGE_CONTAINER }}
        run: |
          CONFIG_FILE="config/test_config.json"
          echo "üìÑ Reading config from $CONFIG_FILE"

          jq -c '.test_cases[] | select(.IsActive=="true")' "$CONFIG_FILE" | while read tc; do
            id=$(echo "$tc" | jq -r '.ID')
            feed_name=$(echo "$tc" | jq -r '.Feed_Name')
            tc_dir="regression/test_cases/tc${id}"

            echo ""
            echo "=============================="
            echo "‚öôÔ∏è  Test Case ID: $id"
            echo "üì¶ Feed Name: $feed_name"
            echo "üìÅ Local Folder: $tc_dir"
            echo "=============================="

            # Upload input_files
            if [ -d "$tc_dir/input_files" ]; then
              echo "üìÇ Found input_files folder for TC$id"
              find "$tc_dir/input_files" -type f | while read file; do
                filename=$(basename "$file")
                destination_blob="data/$ENV/bronze/${feed_name}/tarnishedbronze/landed_feed_files/${filename}"

                echo "üöö Uploading input file:"
                echo "   üîπ Source     : $file"
                echo "   üî∏ Destination: $destination_blob"

                az storage blob upload \
                  --account-name "$ACCOUNT_NAME" \
                  --container-name "$CONTAINER_NAME" \
                  --file "$file" \
                  --name "$destination_blob" \
                  --overwrite \
                  --auth-mode login
              done
            else
              echo "‚ö†Ô∏è  No input_files folder found for TC$id"
            fi

            # Upload sql_files
            if [ -d "$tc_dir/sql_files" ]; then
              echo "üìÇ Found sql_files folder for TC$id"
              find "$tc_dir/sql_files" -type f | while read file; do
                filename=$(basename "$file")
                destination_blob="data/$ENV/bronze/${feed_name}/tarnishedbronze/landed_feed_files/sql_files/${filename}"

                echo "üöö Uploading SQL file:"
                echo "   üîπ Source     : $file"
                echo "   üî∏ Destination: $destination_blob"

                az storage blob upload \
                  --account-name "$ACCOUNT_NAME" \
                  --container-name "$CONTAINER_NAME" \
                  --file "$file" \
                  --name "$destination_blob" \
                  --overwrite \
                  --auth-mode login
              done
            else
              echo "‚ö†Ô∏è  No sql_files folder found for TC$id"
            fi

            echo "‚úÖ Finished uploading for Test Case ID: $id"
            echo ""
          done


