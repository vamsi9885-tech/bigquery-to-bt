
def selective_df(spark, db_table, column_list, start_date=None, end_date=None, delta_date_format=None):
    """
    :param spark: Spark session object
    :param db_table: Table from which data is to be read
    :param column_list: List of columns to be select from the entire table
    :param start_date: start date of window
    :param end_date: End date of window
    :return: Data frame with selected columns and filter condition applied.
    """
    if isinstance(column_list, list):
        df = spark.read.table(db_table)
        return df.select(*column_list)
    elif isinstance(column_list, str) and column_list.upper() == "ALL":
        return spark.read.table(db_table)
    elif isinstance(column_list, dict):
        rnk_fields = column_list.get('rnk_fields')
        sel_fields = column_list['sel_fields'].split(",")
        df = spark.read.table(db_table).select(*sel_fields)
        if column_list.get('FILTER_CONDITION', 0):
            df = df.filter(column_list['FILTER_CONDITION'])
        if start_date is not None:
            delta_column = column_list.get('delta_column', '').strip()
            if delta_date_format is not None:
                filter_cond = "((to_timestamp(" + delta_column + ",'" + delta_date_format + "') >= to_timestamp('" + start_date + "','" + delta_date_format + "')) and   (to_timestamp(" + delta_column + ",'" + delta_date_format + "') < to_timestamp('" + end_date + "','" + delta_date_format + "') ))"
                df = df.filter(filter_cond)
            else:
                df = df.filter((df[delta_column] >= lit(start_date)) & (df[delta_column] < lit(end_date)))
        if start_date is None and end_date is not None:
            delta_column = column_list.get('delta_column', '').strip()
            df = df.filter(df[delta_column] < lit(end_date))
        if rnk_fields is not None:
            part_fields = column_list.get('part_fields')
            part_concat_fields = column_list.get('part_concat_fields')
            rnk_fields = rnk_fields.split(",")
            order_fields = list(map(
                lambda x: df[x.split(" ")[0]].asc() if x.__contains__("asc") else df[x.split(" ")[0]].desc(),
                rnk_fields))
            if part_fields is not None:
                w = Window.partitionBy(*part_fields.split(",")).orderBy(order_fields)
            else:
                w = Window.partitionBy(sf.concat_ws('', *part_concat_fields.split(","))).orderBy(order_fields)
            if column_list.get('row_num') is not None:
                df = df.withColumn("rornk", sf.row_number().over(w)).filter("rornk=1").drop("rornk")
            else:
                df = df.withColumn("rnk", sf.rank().over(w)).filter("rnk=1").drop("rnk")
            # Drop duplicates to remove exact duplicates
            df = df.dropDuplicates()
        return df

{
    "dl_CTPAccident": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aUniqueID,aADSInvolved,aIsBlameless,aAccidentCoordinates,aDateTimeOfAccident,aDateTimeNotified,aPoliceDateReported,aPoliceReportAvailable,aPoliceAttend,aEventNumber,myAccidentProfile_instid,myAccidentProfile_clsno,myAccidentCircumstance_instid,myAccidentCircumstance_clsno,myAccidentLocation_instid,myAccidentLocation_clsno,myInsurerForManaged_instid,myInsurerForManaged_clsno",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_CARAccidentProfile": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aDescription",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_CARAccidentCircumstance": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aDescription",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMPolicyClaim": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,myAccident_instid,myAccident_clsno",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMAddress": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aUnitNumber,aPropertyName,aLevel,aStreetNumber,aStreetName,aPostCode,aType,mySuburb_instid,mySuburb_clsno,myState_instid,myState_clsno,myStreetType_instid,myStreetType_clsno",
        "filter_con": "_operation != 'D' AND aType = 100",
        "active_field": "_timestamp"
    },
    "dl_TIMSuburb": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aName",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMState": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aName,myCountry_instid,myCountry_clsno",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMCountry": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aName",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_CONAddressStreetType": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aName,aCode",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMContactTypeInsurer": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp,oid_instid,oid_clsno,aSharingCode",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "transformations": {
        "joins": [
            {
                "type": "left",
                "table": "dl_CARAccidentProfile",
                "condition": "dl_CTPAccident.myAccidentProfile_instid = dl_CARAccidentProfile.oid_instid AND dl_CTPAccident.myAccidentProfile_clsno = dl_CARAccidentProfile.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_CARAccidentCircumstance",
                "condition": "dl_CTPAccident.myAccidentCircumstance_instid = dl_CARAccidentCircumstance.oid_instid AND dl_CTPAccident.myAccidentCircumstance_clsno = dl_CARAccidentCircumstance.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_TIMPolicyClaim",
                "condition": "dl_CTPAccident.oid_instid = dl_TIMPolicyClaim.myAccident_instid AND dl_CTPAccident.oid_clsno = dl_TIMPolicyClaim.myAccident_clsno"
            },
            {
                "type": "left",
                "table": "dl_TIMAddress",
                "condition": "dl_CTPAccident.myAccidentLocation_instid = dl_TIMAddress.oid_instid AND dl_CTPAccident.myAccidentLocation_clsno = dl_TIMAddress.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_TIMSuburb",
                "condition": "dl_TIMAddress.mySuburb_instid = dl_TIMSuburb.oid_instid AND dl_TIMAddress.mySuburb_clsno = dl_TIMSuburb.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_TIMState",
                "condition": "dl_TIMAddress.myState_instid = dl_TIMState.oid_instid AND dl_TIMAddress.myState_clsno = dl_TIMState.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_TIMCountry",
                "condition": "dl_TIMState.myCountry_instid = dl_TIMCountry.oid_instid AND dl_TIMState.myCountry_clsno = dl_TIMCountry.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_CONAddressStreetType",
                "condition": "dl_TIMAddress.myStreetType_instid = dl_CONAddressStreetType.oid_instid AND dl_TIMAddress.myStreetType_clsno = dl_CONAddressStreetType.oid_clsno"
            },
            {
                "type": "left",
                "table": "dl_TIMContactTypeInsurer",
                "condition": "dl_CTPAccident.myInsurerForManaged_clsno = dl_TIMContactTypeInsurer.oid_clsno AND dl_CTPAccident.myInsurerForManaged_instid = dl_TIMContactTypeInsurer.oid_instid"
            }
        ],
        "fields": {
            "acc_profile": "dl_CARAccidentProfile.aDescription",
            "acc_circum": "dl_CARAccidentCircumstance.aDescription",
            "acc_no": "dl_CTPAccident.aUniqueID",
            "acc_ads_invol": "CASE dl_CTPAccident.aADSInvolved WHEN 0 THEN 'Unknown' WHEN 1 THEN 'Yes' WHEN 2 THEN 'No' END",
            "acc_blameless_flg": "dl_CTPAccident.aIsBlameless",
            "acc_coord_geo": "CAST(dl_CTPAccident.aAccidentCoordinates AS DECIMAL(18,6))",
            "acc_created_ts": "dl_CTPAccident._timestamp",
            "acc_entr_dt": "CAST(dl_CTPAccident._timestamp AS DATE)",
            "acc_dt": "CAST(dl_CTPAccident.aDateTimeOfAccident AS DATE)",
            "acc_yr": "YEAR(dl_CTPAccident.aDateTimeOfAccident)",
            "acc_yr_grp_fnl_tgt": "CASE WHEN YEAR(dl_CTPAccident.aDateTimeOfAccident) >= YEAR(CURRENT_DATE()) - 2 THEN 'Last 3 Years' ELSE 'Tail Accident Years' END",
            "acc_rcvd_dt": "dl_CTPAccident.aDateTimeNotified",
            "acc_rptd_police_dt": "dl_CTPAccident.aPoliceDateReported",
            "acc_loc": "CONCAT_WS(' ', dl_TIMAddress.aUnitNumber, dl_TIMAddress.aPropertyName, dl_TIMAddress.aLevel, dl_TIMAddress.aStreetNumber, dl_TIMAddress.aStreetName, dl_TIMSuburb.aName, dl_TIMState.aName, dl_TIMCountry.aName, dl_TIMAddress.aPostCode)",
            "acc_police_rpt_unavail": "CASE dl_CTPAccident.aPoliceReportAvailable WHEN FALSE THEN 'report unavailable' WHEN TRUE THEN 'report available' END",
            "acc_police_attnd_scene": "CASE dl_CTPAccident.aPoliceAttend WHEN 0 THEN 'Unknown' WHEN 1 THEN 'Yes' WHEN 2 THEN 'No' END",
            "acc_postcd": "dl_TIMAddress.aPostCode",
            "acc_state": "dl_TIMState.aName",
            "acc_st_nm": "dl_TIMAddress.aStreetName",
            "acc_st_nm_type": "CONCAT_WS(' ', dl_TIMAddress.aStreetName, dl_CONAddressStreetType.aName)",
            "acc_st_type_cd": "dl_CONAddressStreetType.aCode",
            "acc_suburb": "dl_TIMSuburb.aName",
            "acc_tstime": "CAST(dl_CTPAccident.aDateTimeOfAccident AS TIME)",
            "acc_police_rpt_no": "dl_CTPAccident.aEventNumber",
            "acc_mnging_insur_cd": "dl_TIMContactTypeInsurer.aSharingCode"
        },
        "primary_key": ["acc_no"],
        "business_keys": ["acc_no"]
    }
}
take a refrence of the above json and give me the file on the basis of the below sql query table names joins selected fields and all 
With rank_unique_TreatmentApplied AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_TreatmentApplied,
        aUniqueId,
        aSessionsApproved,
        aSessionsRequested,
        aCompleted,
        aResponse,
        aServiceProvider,
        myType_clsno,
        myType_instid,
        aDateAdvised,
        aDateRequested,
        myClaimPlanInvestigation_clsno,
        myClaimPlanInvestigation_instid
    From
        DL_TIMTreatmentApplied
),
unique_TreatmentApplied AS
(
    Select *
    From
        rank_unique_TreatmentApplied
    Where
        rank_unique_TreatmentApplied = 1 AND _operation <> 'D'
),
rank_unique_Treatment AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_Treatment,
        aDescription
    from dl_TIMTreatment
),
rank_unique_MedicalInvestigation AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_MedicalInvestigation,
        aDescription
    from DL_TIMMedicalInvestigation
),
rank_unique_ClaimPlanInvestigation AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_ClaimPlanInvestigation,
        aRehabPlanInitiatedBy,
        aTreatmentManager,
        myClaim_clsno,
        myClaim_instid,
        myMedicalCertificate_clsno,
        myMedicalCertificate_instid,
        myExpectedTreatmentPeriod_clsno,
        myExpectedTreatmentPeriod_instid
    From
        dl_TIMClaimPlanInvestigation
),
rank_unique_PolicyClaim AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_PolicyClaim,
        aClaimNumber
    From
        dl_TIMPolicyClaim
),
rank_unique_MedicalCertificate AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_MedicalCertificate,
        myExpectedTreatmentPeriod_clsno,
        myExpectedTreatmentPeriod_instid
    From
        dl_TIMMedicalCertificate
),
rank_unique_ExpectedTreatmentperiod AS
(
    Select
        oid_clsno,
        oid_instid,
        _operation,
        row_number() over (partition by oid_clsno, oid_instid order by _timestamp desc) AS rank_unique_ExpectedTreatmentperiod,
        aCode,
        aDescription
    From
        dl_TIMExpectedTreatmentperiod
)
Select
    aUniqueId AS trtmt_no,
    aClaimNumber AS clm_no,
    aSessionsApproved AS trtmt_no_of_sess_apprvd,
    aSessionsRequested AS trtmt_no_of_sess_reqstd,
    aCompleted AS trtmt_care_completed,
    CASE aResponse
        WHEN 1 THEN 'A'
        WHEN 2 THEN 'P'
        WHEN 3 THEN 'D'
        ELSE ''
    END AS trtmt_care_respnse,
    aServiceProvider AS trtmt_care_servc_provider,
    COALESCE(rank_unique_Treatment.aDescription,rank_unique_MedicalInvestigation.aDescription) AS trtmt_care_servc_type,
    aDateAdvised AS trtmt_care_advised_dt,
    aDateRequested AS trtmt_care_reqstd_dt,
    aTreatmentManager AS trtmt_manager,
    aRehabPlanInitiatedBy AS trtmt_first_plan_intiated_by
From unique_TreatmentApplied
Left Join rank_unique_Treatment
    ON(myType_clsno = rank_unique_Treatment.oid_clsno
    AND myType_instid = rank_unique_Treatment.oid_instid
    AND rank_unique_Treatment = 1
    AND rank_unique_Treatment._operation <> 'D')
Left Join rank_unique_MedicalInvestigation
    ON(myType_clsno = rank_unique_MedicalInvestigation.oid_clsno
    AND myType_instid = rank_unique_MedicalInvestigation.oid_instid
    AND rank_unique_MedicalInvestigation = 1
    AND rank_unique_MedicalInvestigation._operation <> 'D')
Left Join rank_unique_ClaimPlanInvestigation
    ON(myClaimPlanInvestigation_clsno = rank_unique_ClaimPlanInvestigation.oid_clsno
    AND myClaimPlanInvestigation_instid = rank_unique_ClaimPlanInvestigation.oid_instid
    AND rank_unique_ClaimPlanInvestigation = 1
    AND rank_unique_ClaimPlanInvestigation._operation <> 'D')
Left Join rank_unique_PolicyClaim
    ON(myClaim_clsno = rank_unique_PolicyClaim.oid_clsno
    AND myClaim_instid = rank_unique_PolicyClaim.oid_instid
    AND rank_unique_PolicyClaim = 1
    AND rank_unique_PolicyClaim._operation <> 'D');








{
    "DL_TIMTreatmentApplied": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp, oid_clsno, oid_instid, aUniqueId, aSessionsApproved, aSessionsRequested, aCompleted, aResponse, aServiceProvider, myType_clsno, myType_instid, aDateAdvised, aDateRequested, myClaimPlanInvestigation_clsno, myClaimPlanInvestigation_instid",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMTreatment": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp, oid_clsno, oid_instid, aDescription",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "DL_TIMMedicalInvestigation": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp, oid_clsno, oid_instid, aDescription",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMClaimPlanInvestigation": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp, oid_clsno, oid_instid, aRehabPlanInitiatedBy, aTreatmentManager, myClaim_clsno, myClaim_instid, myMedicalCertificate_clsno, myMedicalCertificate_instid, myExpectedTreatmentPeriod_clsno, myExpectedTreatmentPeriod_instid",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "dl_TIMPolicyClaim": {
        "part_fields": "date(_timestamp)",
        "rnk_fields": "_timestamp desc",
        "sel_fields": "_timestamp, oid_clsno, oid_instid, aClaimNumber",
        "filter_con": "_operation != 'D'",
        "active_field": "_timestamp"
    },
    "transformations": {
        "joins": [
            {
                "type": "left",
                "table": "dl_TIMTreatment",
                "condition": "DL_TIMTreatmentApplied.myType_clsno = dl_TIMTreatment.oid_clsno AND DL_TIMTreatmentApplied.myType_instid = dl_TIMTreatment.oid_instid"
            },
            {
                "type": "left",
                "table": "DL_TIMMedicalInvestigation",
                "condition": "DL_TIMTreatmentApplied.myType_clsno = DL_TIMMedicalInvestigation.oid_clsno AND DL_TIMTreatmentApplied.myType_instid = DL_TIMMedicalInvestigation.oid_instid"
            },
            {
                "type": "left",
                "table": "dl_TIMClaimPlanInvestigation",
                "condition": "DL_TIMTreatmentApplied.myClaimPlanInvestigation_clsno = dl_TIMClaimPlanInvestigation.oid_clsno AND DL_TIMTreatmentApplied.myClaimPlanInvestigation_instid = dl_TIMClaimPlanInvestigation.oid_instid"
            },
            {
                "type": "left",
                "table": "dl_TIMPolicyClaim",
                "condition": "dl_TIMClaimPlanInvestigation.myClaim_clsno = dl_TIMPolicyClaim.oid_clsno AND dl_TIMClaimPlanInvestigation.myClaim_instid = dl_TIMPolicyClaim.oid_instid"
            }
        ],
        "fields": {
            "trtmt_no": "DL_TIMTreatmentApplied.aUniqueId",
            "clm_no": "dl_TIMPolicyClaim.aClaimNumber",
            "trtmt_no_of_sess_apprvd": "DL_TIMTreatmentApplied.aSessionsApproved",
            "trtmt_no_of_sess_reqstd": "DL_TIMTreatmentApplied.aSessionsRequested",
            "trtmt_care_completed": "DL_TIMTreatmentApplied.aCompleted",
            "trtmt_care_respnse": "CASE DL_TIMTreatmentApplied.aResponse WHEN 1 THEN 'A' WHEN 2 THEN 'P' WHEN 3 THEN 'D' ELSE '' END",
            "trtmt_care_servc_provider": "DL_TIMTreatmentApplied.aServiceProvider",
            "trtmt_care_servc_type": "COALESCE(dl_TIMTreatment.aDescription, DL_TIMMedicalInvestigation.aDescription)",
            "trtmt_care_advised_dt": "DL_TIMTreatmentApplied.aDateAdvised",
            "trtmt_care_reqstd_dt": "DL_TIMTreatmentApplied.aDateRequested",
            "trtmt_manager": "dl_TIMClaimPlanInvestigation.aTreatmentManager",
            "trtmt_first_plan_intiated_by": "dl_TIMClaimPlanInvestigation.aRehabPlanInitiatedBy"
        },
        "primary_key": ["trtmt_no"],
        "business_keys": ["trtmt_no"],
        "complex_expr_keywords": ["CASE", "COALESCE"],
        "function_replacements": {
            "CAST(": "cast(",
            " AS ": ".cast(",
            "COALESCE": "coalesce",
            "CASE": "CASE",
            "WHEN": "WHEN",
            "THEN": "THEN",
            "ELSE": "ELSE",
            "END": "END"
        }
    }
}

